plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '2.7.10'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.practice'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'javax.servlet:jstl'
	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-test'
	implementation 'org.springframework.boot:spring-boot-test-autoconfigure'
	implementation 'org.springframework:spring-test'
	implementation 'org.hamcrest:hamcrest:2.2'
	implementation 'org.json:json:20230227'
	implementation 'org.junit.jupiter:junit-jupiter:5.9.2'
	implementation 'com.jayway.jsonpath:json-path:2.8.0'
    testImplementation 'junit:junit:4.13.1'
    compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// QueryDSL 라이브러리
	implementation 'com.querydsl:querydsl-core'
	// QueryDSL JPA 라이브러리
	implementation 'com.querydsl:querydsl-jpa'
	implementation 'com.querydsl:querydsl-apt'
	// QueryDSL 관련된 쿼리 타입(QClass)을 생성할 때 필요한 라이브러리로, annotationProcessor을 사용하여 추가
	annotationProcessor("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa")
	// java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 시 추가
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	// java.lang.NoClassDefFoundError(javax.annotation.Generated) 발생 시 추가
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
}

tasks.named('test') {
	useJUnitPlatform()
}

def querydslSrcDir = 'src/main/generated'
sourceSets {
	main {
		java {
			srcDirs += [ querydslSrcDir ]
		}
	}
}

compileJava {
	options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=javax.annotation.Generated'
}

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

clean {
	delete file('src/main/generated')
}